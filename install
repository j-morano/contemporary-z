#!/usr/bin/env python3

import os
import argparse
from urllib import request
from pathlib import Path
from os.path import expandvars
import shutil
import re


parser = argparse.ArgumentParser(description='Install contemporary-z')
parser.add_argument(
    '--path',
    type=str,
    default='$HOME/.local/bin/',
    help='Path to install contemporary-z to'
)
parser.add_argument(
    '--shell',
    type=str,
    default=os.getenv('SHELL'),
    help='Shell to install contemporary-z for'
)
parser.add_argument(
   '--source',
    action='store_true',
    help='Install from source'
)
parser.add_argument(
   '--update',
    action='store_true',
    help='Update existing installation'
)
args = parser.parse_args()

args.path = expandvars(args.path)


if args.source:
    if not os.path.exists('Cargo.toml'):
        print('Cloning repository.')
        os.system("git clone https://github.com/sonarom/contemporary-z.git")
        src_path = 'contemporary-z'
    else:
        src_path = '.'
    print('Installing using Cargo.')
    os.system(f"$HOME/.cargo/bin/cargo install --path {src_path}")
else:
    print('Downloading binary.')
    request.urlretrieve(
        "https://github.com/j-morano/contemporary-z/releases/latest/download/cz",
        "cz"
    )
    print('Making binary executable.')
    st = os.stat('cz')
    os.chmod('cz', st.st_mode | 0o0111)
    if os.path.exists(os.path.join(args.path, 'cz')):
        print('Removing existing binary.')
        os.remove(os.path.join(args.path, 'cz'))
    print('Adding new binary.')
    shutil.move('cz', args.path)

if not args.update:
    if 'bash' in args.shell or 'zsh' in args.shell:
        print('Installing cz for bash shell.')
        print(' - Downloading z.sh.')
        request.urlretrieve(
            "https://raw.githubusercontent.com/j-morano/contemporary-z/main/z.sh",
            "z.sh"
        )
        with open('z.sh', 'r') as fp:
            zsh_contents = fp.read()
        bashrc_path = expandvars("$HOME/.bashrc")
        with open(bashrc_path, 'r') as fp:
            matches = re.findall("z( )+\(", fp.read())
        if len(matches) == 0:
            print(' - Adding z function to bashrc.')
            with open(bashrc_path, 'a') as fp:
                fp.write(zsh_contents)
        else:
            print('Warning: a function `z` already exists in .bashrc, so it was not added.')
    elif 'fish' in args.shell:
        print('Installing cz for fish shell.')
        print(' - Downloading z.fish.')
        request.urlretrieve(
            "https://raw.githubusercontent.com/j-morano/contemporary-z/main/z.fish",
            "z.fish"
        )
        print(' - Creating fish functions directory if it does not exist.')
        Path(
            expandvars("$HOME/.config/fish/functions")
        ).mkdir(parents=True, exist_ok=True)
        z_fish_func_path = expandvars('$HOME/.config/fish/functions/z.fish')
        if os.path.exists(z_fish_func_path):
            print(' - Removing existing fish function.')
            os.remove(z_fish_func_path)
        print(' - Moving z.fish to fish functions directory.')
        shutil.move('z.fish', z_fish_func_path)

print('Done! Please restart your shell.')
print(
    'Then, you can check if contemporary-z is correctly installed by running:'
    '\n$ z --version'
)
